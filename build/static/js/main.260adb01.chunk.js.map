{"version":3,"sources":["store/reducer.js","store/store.js","components/MaskInput.jsx","components/NewForm.jsx","actions/api.js","components/Forms.jsx","App.js","actions/actions.js","reportWebVitals.js","index.js"],"names":["GET_SOME_FORMS","FILTER_COLUMN","TOGGLE_IS_FETCHING","CREATE_NEW_FORM","initialState","formData","isFetching","sortRow","getSomeElements","form","type","toggleIsFetching","formReducer","state","action","stateCopy","unshift","newForm","console","log","arr","Array","sort","a","b","column","ifFetching","reducer","combineReducers","store","createStore","applyMiddleware","thunk","IDMaskedInput","this","props","other","inputRef","mask","placeholderChar","placeholder","value","showMask","keepCharPositions","React","Component","NewForm","handleChange","event","target","name","setState","id","firstName","lastName","email","phone","handleSubmit","pushFormOnStore","ValidatorForm","addValidationRule","testName","test","testPhone","className","ref","onSubmit","onError","errors","label","onChange","validators","errorMessages","InputProps","inputComponent","Button","LoadAPI","axios","then","response","data","useRowStyles","makeStyles","root","borderBottom","Row","row","useState","open","setOpen","classes","Fragment","TableRow","TableCell","IconButton","aria-label","size","onClick","component","scope","align","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","address","TableBody","secondName","description","streetAddress","city","zip","CollapsibleTable","totalPages","forms","length","currentPage","Number","elementsOnPage","filterColumn","indexOfLastTodo","indexOfFirstTodo","currentElements","slice","pageNumbers","i","Math","ceil","push","TableContainer","Paper","clickOnColumnType","map","random","e","onPageChange","App","addNewForm","LoadSome","LoadMore","connect","dispatch","filterElements","createNewForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.260adb01.chunk.js","sourcesContent":["const GET_SOME_FORMS = 'GET_SOME_FORMS';\nconst FILTER_COLUMN = 'FILTER_COLUMN';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst CREATE_NEW_FORM ='CREATE_NEW_FORM';\nlet initialState = {\n    formData:[],\n    isFetching:false,\n    sortRow:false\n}\nconst formReducer = (state = initialState, action) => {\n    let stateCopy = {...state};\n    stateCopy.formData = [...state.formData]\n\n\n    switch (action.type) {\n        case GET_SOME_FORMS: {\n            stateCopy.formData = action.form;\n            return stateCopy;\n\n        }\n        case TOGGLE_IS_FETCHING: {\n            stateCopy.isFetching=action.isFetching\n            return stateCopy;\n\n        }\n        case CREATE_NEW_FORM: {\n            stateCopy.formData.unshift(action.newForm)\n            return stateCopy;\n\n        }\n        case FILTER_COLUMN: {\n            console.log(action.sortRow)\n            let arr = new Array(stateCopy.formData)\n            if (action.sortRow.sortRow){\n                arr[0].sort((a, b) => b[action.column.column] < a[action.column.column] ? 1 : -1)\n                stateCopy.sortRow=false\n            }else{\n                arr[0].sort((a, b) => b[action.column.column] > a[action.column.column] ? 1 : -1)\n                stateCopy.sortRow=true\n            }\n            stateCopy.formData = arr[0]\n            stateCopy.ifFetching=false\n\n            return stateCopy\n        }\n        default:\n            return state;\n    }\n\n}\nexport const getSomeElements=(form)=>{\n    return ({type: GET_SOME_FORMS,form})\n}\nexport const toggleIsFetching=(isFetching)=>{\n    return ({type: TOGGLE_IS_FETCHING,isFetching})\n}\nexport const filterElements=(column,sortRow)=>{\n    return ({type: FILTER_COLUMN,column,sortRow})\n}\nexport const createNewForm=(newForm)=>{\n    return ({type: CREATE_NEW_FORM,newForm})\n}\nexport default formReducer;\n","import {combineReducers, createStore,applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk'\nimport formReducer from \"./reducer\";\nlet reducer = combineReducers({\n    formReducer:formReducer\n});\nconst store = createStore(reducer, applyMiddleware(thunk))\nexport default store;\n","import React from \"react\";\nimport MaskedInput from \"react-text-mask\";\n\nclass IDMaskedInput extends React.Component {\n  render() {\n    const { inputRef, ...other } = this.props;\n    return (\n      <div>\n        <MaskedInput\n          {...other}\n          mask={['(', /[1-9]/, /\\d/, /\\d/, ')', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]}\n          placeholderChar={\"\\u2000\"}\n          placeholder=\"(999)999-9999\"\n          value={this.props.value}\n          showMask={false}\n          keepCharPositions={false}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default IDMaskedInput;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport IDMaskedInput from \"./MaskInput\";\nclass NewForm extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            id: '',\n            firstName: '',\n            lastName: '',\n            email: '',\n            phone: '',\n        }\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule('isName', (value) => {\n            let testName = (value) => (/^[a-zA-Zа-яА-Я]+$/).test(value)\n            console.log(testName(value))\n            if (testName(value)) {\n                return true;\n            }\n            return false;\n        })\n        ValidatorForm.addValidationRule('isPhone', (value) => {\n            let testPhone = (value) => (/^((8|\\+7)[/\\- ]?)?(\\(?\\d{3}\\)?[/\\- ]?)?[\\d\\- ]{7,10}$/).test(value)\n            console.log(testPhone(value))\n            if (testPhone(value)) {\n                return true;\n            }\n            return false;\n        })\n    }\n\n    handleChange = (event) => {\n        switch (event.target.name) {\n            case 'id':\n                this.setState({ id: event.target.value });\n                break;\n            case 'firstName':\n                this.setState({ firstName: event.target.value });\n                break;\n            case 'lastName':\n                this.setState({ lastName: event.target.value });\n                break;\n            case 'email':\n                this.setState({ email: event.target.value });\n                break;\n            case 'phone':\n                this.setState({ phone: event.target.value });\n                break;\n            default:\n                console.log(event)\n\n        }\n    }\n    handleSubmit = () => {\n            const newForm = {...this.state}\n            this.props.pushFormOnStore(newForm)\n    }\n    render() {\n        let { id, firstName, lastName, email, phone } = this.state;\n        return (\n            <ValidatorForm className=\"ValidatorForm\"\n                ref=\"form\"\n                onSubmit={this.handleSubmit}\n                onError={errors => console.log(errors)}\n            >\n                <TextValidator\n                    label=\"id\"\n                    onChange={this.handleChange}\n                    name=\"id\"\n                    type='number'\n                    value={id}\n                    validators={['required']}\n                    errorMessages={['this field is required', 'id is not valid']}\n                />\n                <TextValidator\n                    label=\"firstName\"\n                    onChange={this.handleChange}\n                    name=\"firstName\"\n                    type='text'\n                    value={firstName}\n                    validators={['isName']}\n                    errorMessages={['firstName is not valid']}\n                />\n                <TextValidator\n                    label=\"lastName\"\n                    onChange={this.handleChange}\n                    name=\"lastName\"\n                    type='text'\n                    value={lastName}\n                    validators={['isName']}\n                    errorMessages={['this field is required', 'lastName  is not valid']}\n                />\n                <TextValidator\n                    label=\"email\"\n                    onChange={this.handleChange}\n                    name=\"email\"\n                    type='email'\n                    value={email}\n                    validators={['required', 'isEmail']}\n                    errorMessages={['this field is required', 'email is not valid']}\n                />\n                <TextValidator\n                    label=\"phone\"\n                    onChange={this.handleChange}\n                    name=\"phone\"\n                    value={phone}\n                    validators={['isPhone']}\n                    errorMessages={['phone is not valid']}\n                    InputProps={{\n                        inputComponent: IDMaskedInput,\n                    }}\n                >\n                </TextValidator>\n\n                <Button type=\"submit\">Submit</Button>\n            </ValidatorForm>\n        );\n    }\n}\nexport default NewForm;\n\n","import * as axios from \"axios\";\n\n\nexport const LoadAPI = {\n    getSomeUsers(){\n        return axios.get('http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}').then(response => response.data)\n    },\n    getMoreUsers(){\n        return axios.get('http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}').then(response => response.data)\n\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n});\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.id}\n                </TableCell>\n                <TableCell align=\"right\">{row.firstName}</TableCell>\n                <TableCell align=\"right\">{row.lastName}</TableCell>\n                <TableCell align=\"right\">{row.email}</TableCell>\n                <TableCell align=\"right\">{row.phone}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                Info\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Выбран пользователь</TableCell>\n                                        <TableCell>Описание</TableCell>\n                                        <TableCell align=\"right\">Адрес проживания</TableCell>\n                                        <TableCell align=\"right\">Город</TableCell>\n                                        <TableCell align=\"right\">Провинция/штат</TableCell>\n                                        <TableCell align=\"right\">Индекс</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                          {row.address ? <TableBody>\n                                        <TableRow key={row.id}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {row.firstName}{row.secondName}\n                                            </TableCell>\n                                            <TableCell>{row.description}</TableCell>\n                                            <TableCell align=\"right\">{row.address.streetAddress}</TableCell>\n                                            <TableCell align=\"right\">{row.address.city}</TableCell>\n                                            <TableCell align=\"right\">{row.address.state}</TableCell>\n                                            <TableCell align=\"right\">{row.address.zip}</TableCell>\n                                        </TableRow>\n                                </TableBody> : ''}\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\nclass CollapsibleTable extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n        sortRow:this.props.sortRow,\n        totalPages:(this.props.forms.length/50),\n        currentPage:Number(1),\n        elementsOnPage:50\n        }\n\n    }\n    onPageChange(currentPage) {\n        this.setState({currentPage});\n    }\n    clickOnColumnType(type){\n        this.setState({sortRow:!this.state.sortRow})\n        this.props.filterColumn(type, {sortRow: this.state.sortRow})\n    }\n    render() {\n        const { currentPage,elementsOnPage } = this.state;\n        const indexOfLastTodo = currentPage * elementsOnPage;\n        const indexOfFirstTodo = indexOfLastTodo - elementsOnPage;\n        const currentElements = this.props.forms.slice(indexOfFirstTodo, indexOfLastTodo);\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.props.forms.length / elementsOnPage); i++) {\n            pageNumbers.push(i);\n        }\n        return (\n            <>\n            <TableContainer component={Paper}>\n                <Table aria-label=\"collapsible table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell/>\n                            <TableCell onClick={() => this.clickOnColumnType({column: 'id'})}>id {!this.props.sortRow?'▲':'▼'}</TableCell>\n                            <TableCell onClick={() => this.clickOnColumnType({column: 'firstName'})} align=\"right\">First\n                                Name {!this.props.sortRow?'▲':'▼'}</TableCell>\n                            <TableCell onClick={() => this.clickOnColumnType({column: 'secondName'})} align=\"right\">Second\n                                Name {!this.props.sortRow?'▲':'▼'}</TableCell>\n                            <TableCell onClick={() => this.clickOnColumnType({column: 'email'})}\n                                       align=\"right\">Email {!this.props.sortRow?'▲':'▼'}</TableCell>\n                            <TableCell onClick={() => this.clickOnColumnType({column: 'phone'})}\n                                       align=\"right\">Phone {!this.props.sortRow?'▲':'▼'}</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {currentElements.map((row) => {\n                            return <Row key={row.id+row.firstName+Math.random()} row={row}/>\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n                {pageNumbers.map(e=> <button onClick={()=>this.onPageChange(e)}>{e}</button>)}\n            </>\n        );\n    }\n}\nexport default CollapsibleTable;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport './App.css';\nimport NewForm from \"./components/NewForm\";\nimport {LoadSome, LoadMore, filterColumn,pushFormOnStore} from \"./actions/actions\";\nimport CollapsibleTable from \"./components/Forms\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {addNewForm: false}\n    }\n\n    LoadSome() {\n        this.props.LoadSome()\n\n    }\n\n    LoadMore() {\n        this.props.LoadMore()\n    }\n\n    render() {\n        return (<>\n                <div className=\"App\">\n                    <div>\n                        <button onClick={() => this.LoadSome()}>Some</button>\n                        <button onClick={() => this.LoadMore()}>More</button>\n                        <button onClick={() => this.setState({addNewForm: !this.state.addNewForm})}>addRow</button>\n                        {this.state.addNewForm ? <NewForm pushFormOnStore={this.props.pushFormOnStore} forms={this.props.forms}/> : ''}\n                    </div>\n                    {/*<Table {...this.props}*/}\n                    {/*       forms={this.props.forms}/>*/}\n                    {this.props.isFetching ? <div className=\"preloader\"></div> : \"\"}\n                    {this.props.forms[0] ?\n                        <CollapsibleTable filterColumn={this.props.filterColumn} forms={this.props.forms} sortRow={this.props.sortRow}/>\n                        : ''}\n                </div>\n            </>\n        );\n    }\n};\nconst mapStateToProps = (state) => ({\n    forms: state.formReducer.formData,\n    isFetching: state.formReducer.isFetching,\n    sortRow: state.formReducer.sortRow,\n});\nexport default connect(mapStateToProps, {\n    LoadSome, LoadMore, filterColumn,pushFormOnStore\n})(App);\n","import {LoadAPI} from \"./api\";\nimport {filterElements, getSomeElements, toggleIsFetching,createNewForm} from \"../store/reducer\";\n\nexport const LoadSome=()=>(dispatch)=>{\n    dispatch(toggleIsFetching(true))\n   LoadAPI.getSomeUsers()\n        .then(response => {\n            dispatch(toggleIsFetching(false))\n            dispatch(getSomeElements(response))\n        })\n\n}\nexport const pushFormOnStore=(newForm)=>(dispatch)=>{\n    dispatch(createNewForm(newForm))\n}\nexport const LoadMore=()=>(dispatch)=>{\n    dispatch(toggleIsFetching(true))\n    LoadAPI.getMoreUsers()\n        .then(response => {\n            dispatch(toggleIsFetching(false))\n            dispatch(getSomeElements(response))\n        })\n}\nexport const addNewRow=()=>(dispatch)=>{\n\n}\nexport const filterColumn=(column,sortRow)=>(dispatch)=>{\n    // console.log(column,sortRow)\n    dispatch(filterElements(column,sortRow))\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from \"./store/store\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}